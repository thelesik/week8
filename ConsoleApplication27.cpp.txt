
#include <iostream> 
#include <vector> 
#include <istream> 
#include <string> 
#include "Header.h"


const int MaxDataBase = 10000;
using namespace std;



class Person {
private:
    string name;
    string ssn;
    string birthDate;

public:
    string getName() {
        return name;
    }
    string getSsn() {
        return ssn;
    }
    string getBirthDate() {
        return birthDate;
    }
    void setName(string Name) {
        name = Name;
    }
    void setSsn(string Ssn) {
        ssn = Ssn;
    }
    void setBirthDate(string BirthDate) {
        birthDate = BirthDate;
    }
    void Display() {
        cout << "Name: " << name << endl;
        cout << "SSN: " << ssn << endl;
        cout << "birth date" << birthDate;
    }
    virtual string category() = 0;
};



class Owner : public Person {
private:
    double businessPercentage;
    string ownerDate;
public:
    double getBusinessPercentage() {
        return businessPercentage;
    }
    string getOwnerDate() {
        return ownerDate;
    }
    void setBusinessPercentage(double BusinessPercentage) {
        businessPercentage = BusinessPercentage;
    }
    void setOwnerDate(string OwnerDate) {
        ownerDate = OwnerDate;
    }
    void Display() {
        cout << "Business Percentage: " << businessPercentage << endl;
        cout << "Owner Date: " << ownerDate << endl;
    }
    string category() {
        return "Owner";
    }
};


class Manager : public Person {
private:
    string department;
    string empId;
    double salary;
public:
    string getDepartment() {
        return department;
    }
    string getEmpId() {
        return empId;
    }
    double getSalary() {
        return salary;
    }
    void setDepartment(string Department) {
        department = Department;
    }
    void setEmpId(string EmpId) {
        empId = EmpId;
    }
    void setSalary(double Salary) {
        salary = Salary;
    }
    void Display() {
        cout << "department: " << department << endl;
        cout << "empId: " << empId << endl;
        cout << "salary" << salary << endl;
    }
    string category() {
        return "Manager";
    }
};

class Laborer : public Person {
private:
    string job;
    string empId;
    double hourlySalary;
    double hoursWorked;
public:
    string getJob() {
        return job;
    }
    string getEmpId() {
        return empId;
    }
    double getHourlySalary() {
        return hourlySalary;
    }
    double getHoursWorked() {
        return hoursWorked;
    }
    // mutators 
    void setJob(string Job) {
        job = Job;
    }
    void setEmpId(string EmpId) {
        empId = EmpId;
    }
    void setHourlySalary(double HourlySalary) {
        hourlySalary = HourlySalary;
    }
    void setHoursWorked(double HoursWorked) {
        hoursWorked = HoursWorked;
    }
    void Display() {
        cout << "job: " << job << endl;
        cout << "empId: " << empId << endl;
        cout << "hourly Salary: " << hourlySalary << endl;
        cout << "hours Worked: " << hoursWorked << endl;

    }
    string category() {
        return "Laborer";
    }
};

void Display(vector<Person*>& v, string s)
{
    if (v.empty()) {
        std::cout << "List is empty\n";
    }
    else {

        if (s == "all") {

            cout << "Total Persons in vector: " << v.size() << endl;
            long len = v.size();
            for (long i = 0; i < len; i++) {
                v[i]->Display();
                std::cout << std::endl;
                if (v.at(i)->category() == "Laborer") {
                    Laborer* lab = dynamic_cast<Laborer*>(v.at(i));
                    lab->Display();
                }
                else if (v.at(i)->category() == "Manager") {
                    Manager* man = dynamic_cast<Manager*>(v.at(i));
                    man->Display();
                }
                else if (v.at(i)->category() == "Owner") {
                    Owner* own = dynamic_cast<Owner*>(v.at(i));
                    own->Display();
                }
                cout << endl << endl;
            }
        }

        else if (s == "laborer") {
            cout << "Total Persons in vector: " << v.size() << endl;
            long len = v.size();
            for (long i = 0; i < len; i++) {
                std::cout << std::endl;
                if (v.at(i)->category() == "Laborer") {
                    v[i]->Display();
                    Laborer* lab = dynamic_cast<Laborer*>(v.at(i));
                    lab->Display();
                }
                cout << endl << endl;
            }
        }
        else if (s == "manager") {

        }
        else if (s == "owner") {

        }
    }
}

void RemoveEinV(vector<Person*>& v, int pos) //remove element
{
 v.erase(v.begin() + pos);
}

void AddEinV(vector<Person*>& v, int pos) //add element(copy basically)
{
    v.push_back(v[pos]);
}
void Sort(vector<Person*>& v) {
    long len = v.size();
    for (int i = 0; i < (len - 1); i++) {
        for (int j = (i + 1); j < len; j++) {
            if (v.at(i)->getName() < v.at(j)->getName()) {
                AddEinV(v, i);
                RemoveEinV(v, i);
            }
        }

    }
    reverse(v.begin(), v.end());
}


void MainPart()
{
    vector<Person*> persons;
    for (int j = 0; j <= MaxDataBase; j++) {

        int mainchopice = 0;
        cout << "1. Add person" << endl << "2. Display list" << endl << "3. Sort list" << endl << "4. To Exit" << endl;
        mainchopice = ReadValue<double>("Enter choice ");
        if (mainchopice == 1) {
            int choice;
            cout << "1. Add Laborer" << endl << "2. Add Manager" << endl << "3. Add Owner" << endl << "4. to go back to previous menu" << endl;
            choice = ReadValue<double>("Enter choice ");
            cin.ignore();
            if (choice == 1) {
                string name, ssn, birthDate, job, empId;
                double hourlySalary, hoursWorked;
                name = ReadValueString<string>("Enter name: ");
                ssn = ReadValueString < string>("Enter social security number: ");
                birthDate = ReadValueString < string>("Enter birth date: ");
                job = ReadValueString<string>("Enter job: ");
                empId = ReadValueString < string>("Enter employee id: ");
                hourlySalary = ReadValue  < double>("Enter hourly salary: ");
                hoursWorked = ReadValue<double>("Enter hours worked : ");
                Laborer* lab = new Laborer();
                lab->setName(name);
                lab->setSsn(ssn);
                lab->setBirthDate(birthDate);
                lab->setJob(job);
                lab->setEmpId(empId);
                lab->setHourlySalary(hourlySalary);
                lab->setHoursWorked(hoursWorked);
                persons.push_back(lab);
            }
            else if (choice == 2) {
                string name, ssn, birthDate, department, empId;
                double salary;
                name = ReadValueString<string>("Enter name: ");
                ssn = ReadValueString < string>("Enter social security number: ");
                birthDate = ReadValueString < string>("Enter birth date: ");
                department = ReadValueString < string>("Enter department: ");
                empId = ReadValueString < string>("Enter employee id: ");
                salary = ReadValue<double>("Enter salary: ");
                Manager* man = new Manager();
                man->setName(name);
                man->setSsn(ssn);
                man->setBirthDate(birthDate);
                man->setDepartment(department);
                man->setEmpId(empId);
                man->setSalary(salary);
                persons.push_back(man);
            }
            else if (choice == 3) {
                string name, ssn, birthDate, ownDate;
                double businessPercentage;
                name = ReadValueString<string>("Enter name: ");
                ssn = ReadValueString < string>("Enter social security number: ");
                birthDate = ReadValueString < string>("Enter birth date: ");
                businessPercentage = ReadValue  < double>("Enter business Percentage: ");
                ownDate = ReadValueString < string>("Enter the date you became an owner: ");
                Owner* owner = new Owner();
                owner->setName(name);
                owner->setSsn(ssn);
                owner->setBirthDate(birthDate);
                owner->setBusinessPercentage(businessPercentage);
                owner->setOwnerDate(ownDate);
                persons.push_back(owner);
            }
            else if (choice == 4) {
            }
        }

        /// /////////////////////////////////////////////////////////

        else if (mainchopice == 2) {
            int choice2 = 0;
            cout << "1. Display All " << endl << "2. Display Laborer" << endl << "3. Display Manager" << endl << "4. Display Owner" << endl << "5 to bacl to previous menu";
            choice2 = ReadValue<double>("Enter choice ");
            if (choice2 == 1) {
                cout << endl;
                if (persons.size() > 0) {
                    Display(persons, "all");
                }
            }
            else if (choice2 == 2) {
                cout << endl;
                if (persons.size() > 0) {
                    Display(persons, "laborer");
                }
            }
            else if (choice2 == 5) {
            }
        }

        ///////////////////////////////////////////////////////////

        else if (mainchopice == 3) {

            Sort(persons);
        }



        /// ////////////////////////////////////////////////////////////////

        else if (mainchopice == 4) {
            goto Check1; // I know not a good idea to use goto but it safe

        }
        
        //////////////////////////////////////////////////
        
    }

Check1:
    return;
}
int main() {
    MainPart();
    return 0;
}
/*This week you will be building on the Week 7's assignment.
The list of owners, managers and employees will be stored in a class.
Provide functions that will display all employees, or only 1 category.
Also provide a function that will sort the list by name alphabetically.
You will also need functions to add and remove people from the list.
Provide a menu similar to the one below to access the functionality:
1. Add person
2. Display list
3. Sort list
4. Quit

Option 1 should display a menu allowing the user to choose the type of person they are adding:
1. Owner
2. Manager
3. Laborer
Option 2 should display a menu allowing the user to choose the category of person to display
1. All
2. Owners
3. Managers
4. Laborers.*/